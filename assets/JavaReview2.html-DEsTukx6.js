import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DrMrOvds.js";const e={},p=t(`<h1 id="java基础复习-jdk基础" tabindex="-1"><a class="header-anchor" href="#java基础复习-jdk基础"><span>Java基础复习-JDK基础</span></a></h1><p>由于基础的东西很多、很杂，所以这里也只能是想到什么是什么</p><h2 id="_1-oop-面向对象" tabindex="-1"><a class="header-anchor" href="#_1-oop-面向对象"><span>1.OOP（面向对象）</span></a></h2><p>面向对象是一种重要的软件开发思想，将待解决的问题通过对象的设计进行解决。</p><p>OOP有四个重要的特性：</p><ul><li><strong>封装</strong>：类的信息被隐藏在类内部，一般不允许外部直接去访问类的数据，而是通过类的方法进行访问和操作。</li><li><strong>继承</strong>：继承是通过已有的父类派生新的子类，子类可以继承父类本来的属性、方法和特性，并可以在其基础上进行扩展。Java类只能继承<strong>一个</strong>非final类。</li><li><strong>多态</strong>：多态是指在不改变代码的情况下，改变运行指定的代码部分从而实现不同的功能。多态的三个重要要素是<em>继承</em>、<em>重写</em>、<em>父类引用指向子类对象</em>。重载方法可以在同一个类中根据不同的参数列表执行不同的方法主体，子类重写父类方法可以通过对象的实际类型来执行相应的方法。</li><li><strong>抽象</strong>：将客观的事物通过代码抽象出来，抽象类、抽象方法。</li></ul><p>面向对象编程有六个重要的原则：</p><ul><li>对象单一职责：我们设计的对象，其负责的内容（属性、方法等）必须要专一，各个对象有明确的职责分工</li><li>里氏替换原则：子类应当能够完全代替父类的功能。这意味着子类必须完全实现父类的所有方法</li><li>开闭原则：对外扩展开放、对内修改关闭。也就是说尽量通过扩展而非修改的方式实现变更的需求。</li><li>迪米特法则：高内聚、低耦合，避免类与类之间在细节上的依赖。</li><li>依赖倒置原则：高层模块应该依赖于底层的抽象。实现类应该依赖于接口和抽象类。</li><li>接口隔离原则：要求接口设计大小适中。</li></ul><h2 id="_2-反射" tabindex="-1"><a class="header-anchor" href="#_2-反射"><span>2.反射</span></a></h2><p>Java的反射机制是指：在代码运行的过程中，对于任何一个类、可以知道他的具体类、内部属性和方法，而对于任何一个对象可以去调用其内部的方法。</p><p>在IDE开发工具中，会通过反射的机制来解析对象的类，为开发者展示相应的属性、方法甚至注释等信息。</p><p>在AOP编程中，JDK动态代理会通过反射的方式去调用代理对象的方法。</p><p>JDBC连接数据库时也会通过反射机制去加载数据库的加载程序。</p><p>invoke关键词可以用于执行通过反射得到的方法等可执行代码</p><p>下面是一个典型的反射代码案例，包含了常见的反射操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取 Person 类的 Class 对象</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> personClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取并打印所有构造方法</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Constructor: &quot;</span> <span class="token operator">+</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建 Person 对象实例</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> person <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取并打印所有方法,包括修饰方法的关键词</span>
    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Method: &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 调用 setName 方法</span>
    <span class="token class-name">Method</span> setNameMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;setName&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    setNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用 getName 方法</span>
    <span class="token class-name">Method</span> getNameMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> getNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取并打印所有字段</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Field: &quot;</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 访问私有字段 name</span>
    <span class="token class-name">Field</span> nameField <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> updatedName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Updated Name: &quot;</span> <span class="token operator">+</span> updatedName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Constructor</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//下面的方法继承自Object类</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Method</span><span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Jane</span> <span class="token class-name">Doe</span>
<span class="token class-name">Field</span><span class="token operator">:</span> <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>name
<span class="token class-name">Field</span><span class="token operator">:</span> <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>age
<span class="token class-name">Updated</span> <span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">John</span> <span class="token class-name">Smith</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_3-序列化和反序列化"><span>3.序列化和反序列化</span></a></h2><p>序列化是指将对象转换为特定的字节序列，反序列化则是将字节序列转换为对象数据。</p><p>在数据持久化的过程中，例如将数据存储到Redis中，会通过序列化和反序列化的技术实现对象的存储。例如使用Jackson将对象序列化为json数据。实现序列化和反序列化需要实现 Serializable 接口。</p><h2 id="_4-接口和抽象类的区别" tabindex="-1"><a class="header-anchor" href="#_4-接口和抽象类的区别"><span>4.接口和抽象类的区别</span></a></h2><ul><li>一个类只能继承一个抽象类，但是可以实现多个接口</li><li>接口中不能够含有静态方法和静态代码块，而抽象类可以</li><li>抽象类中可以有实现的方法，而接口应该提供抽象方法</li><li>抽象类和类更接近，但是不能够被实例化。</li></ul><h2 id="_5-final和static关键词" tabindex="-1"><a class="header-anchor" href="#_5-final和static关键词"><span>5.final和static关键词</span></a></h2><p>final和static都是用于修饰类、方法、属性的关键词</p><p>final的特点：</p><ul><li>final类是最终类，不能被继承。</li><li>final方法不能够被子类重写</li><li>final修饰的变量会作为常量，不能修改</li></ul><p>static的特点：</p><ul><li>static类可以用于修饰内部类（不能修饰外部类）作为外部类的静态成员，只能访问外部类的静态方法</li><li>static方法属于类，无需通过实例化的对象调用</li><li>static变量属于静态变量，在最初就会被创建，该类实例化的所有对象共享static数据</li><li>static还可以修饰代码块，静态代码块会在类最初随着静态属性一同实例化</li></ul><h2 id="_6-浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#_6-浅拷贝和深拷贝"><span>6.浅拷贝和深拷贝</span></a></h2><p>对象的复制和拷贝可以通过实现Cloneable接口并重写clone()方法实现，也有其他实现方法</p><p>浅拷贝：复制对象时只复制对象本身和对象的基本数据类型，如果存在对象引用，则不会变化</p><p>实现方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//拷贝构造方法</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//工厂方法</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">,</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//重写clone方法</span>
<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深拷贝：复制对象除了复制对象本身和对象内部的基本数据类型之外，对引用的对象也会进行一次复制，这样拷贝对象和原始对象引用的对象不是同一个对象。</p><p>实现方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//1、重写clone方法</span>
<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">setDog</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>animal<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> animal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//2、对象序列化与反序列化，需要实现Serializable接口</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token class-name">T</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteArrayOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            output<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象序列化</span>
 
            <span class="token class-name">ByteArrayInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象反序列化</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token comment">//3、手动递归复制，代码略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-java创建对象的4个方式" tabindex="-1"><a class="header-anchor" href="#_7-java创建对象的4个方式"><span>7.Java创建对象的4个方式</span></a></h2><ul><li>1.直接通过new调用构造方法创建对象</li><li>2.通过反射机制，调用类的Class.newInstance()方法创建对象</li><li>3.通过clone()方法对已有对象进行拷贝复制</li><li>4.反序列化将字节序列转换为对象</li></ul><h2 id="_8-泛型" tabindex="-1"><a class="header-anchor" href="#_8-泛型"><span>8.泛型</span></a></h2><p>允许类、接口和方法接受多种类型的参数进行定义</p><p>下面是泛型类的实际代码演示</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span>
<span class="token comment">//在实例化泛型类时，必须指定T的具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 
    <span class="token comment">//key这个成员变量的类型为T,T的类型由外部指定  </span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span>
        <span class="token keyword">return</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是泛型方法的实际代码演示</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 泛型方法的基本介绍
 * <span class="token keyword">@param</span> <span class="token parameter">tClass</span> 传入的泛型实参
 * <span class="token keyword">@return</span> T 返回值为T类型
 * 说明：
 *     1）public 与 返回值中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span>非常重要，可以理解为声明此方法为泛型方法。
 *     2）只有声明了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。
 *     3）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。
 *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。
 */</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">genericMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">,</span>
  <span class="token class-name">IllegalAccessException</span><span class="token punctuation">{</span>
        <span class="token class-name">T</span> instance <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通配符&quot;?&quot;，可以通过&quot;?&quot;表示未知类型</p><p>使用extends和super关键词可以对泛型的类型进行限制,如下所示</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_9-基本数据类型"><span>9.基本数据类型</span></a></h2><p>Java中共有8个基本数据类型，详细信息见下表</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">储存内容</th><th style="text-align:center;">占用字节</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">字节</td><td style="text-align:center;">8bit | 1字节</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">字符</td><td style="text-align:center;">16bit | 2字节</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">短整型</td><td style="text-align:center;">16bit | 2字节</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">整型</td><td style="text-align:center;">32bit | 4字节</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">浮点数</td><td style="text-align:center;">32bit | 4字节</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">长整型</td><td style="text-align:center;">64bit | 8字节</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">双精度浮点数</td><td style="text-align:center;">64bit | 8字节</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">1bit | 1字节或4字节</td></tr></tbody></table><h2 id="_10-装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#_10-装箱和拆箱"><span>10.装箱和拆箱</span></a></h2><p><strong>装箱</strong>(Boxing)是将基本数据类型(int,double等)值转换为相应包装器类(Integer,Double等)的实例对象。装箱可以实现利用对象的特性(引用传递、储存在集合类中、传递对象参数等)</p><p>JDK5开始编译器会自动装箱，比如可以直接用int向Integer传值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//自动装箱，JDK5以后。隐性调用了Integer.valueOf(a)</span>
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动装箱，JDK5以前</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拆箱</strong>(Unboxing)是将包装器对象转换为基本数据类型值，通常应用在算术运算、比较、赋值基本类型变量等场合</p><p>JDK5开始也提供自动拆箱的功能，实现对象为基本数据类型传值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//自动拆箱，JDK5以后。隐性调用了xxxValue()方法</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动拆箱，JDK5以前</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意对象之间的比较应当用<code>equals()</code>，而不是用<code>==</code>，但下面的情况除外</p><p>常量池优化： 对于<code>Integer</code>、<code>Byte</code>、<code>Short</code>、<code>Long</code>、<code>Character</code>对象，<code>-128</code>至<code>127</code>之间的数值会重复使用已创建的对象，采用缓存策略，即创建对象时为相同引用 因此这种情况可以使用<code>==</code>进行比较，如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b1 <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b2 <span class="token operator">=</span> <span class="token number">124</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true，实质上是同一个对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true，计算不影响规则</span>
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false，超出常量池范围，实质是两个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-注解" tabindex="-1"><a class="header-anchor" href="#_11-注解"><span>11.注解</span></a></h2><p>注解(Annotation)是JDK5引入的一种代码级别的说明，目前绝大多数的Java框架都是基于<strong>注解+反射</strong>实现的</p><p><strong>(1)注释的功能</strong>：</p><ul><li>编译检查：例如<code>@Override</code>检查重载重写情况</li><li>代码分析：利用反射机制对代码进行分析处理</li><li>动态处理：Java框架在编译时读取注解信息</li><li>生成文档：Javadoc生成API文档</li></ul><p><strong>(2)自定义注解的语法</strong>: 与接口相似，但这里interface前加了@ 注解支持的参数类型包括八大基础数据类型、<code>String</code>、<code>Class</code>、<code>Enum</code>和其余注解，及上述类型的数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//定义</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//定义value属性</span>
<span class="token punctuation">}</span>
<span class="token comment">//使用</span>
<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;This is my custom annotation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(3)元注解</strong>： 用于标识注解信息的注解</p><table><thead><tr><th style="text-align:center;">注解名</th><th style="text-align:center;">功能</th><th style="text-align:center;">参数</th></tr></thead><tbody><tr><td style="text-align:center;">@Retention</td><td style="text-align:center;">确定注解生命周期，注解可用范围</td><td style="text-align:center;">RetentionPolicy</td></tr><tr><td style="text-align:center;">@Target</td><td style="text-align:center;">指定注解可应用源码元素</td><td style="text-align:center;">ElementType</td></tr><tr><td style="text-align:center;">@Inherited</td><td style="text-align:center;">允许子类继承父类注解</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">@Documented</td><td style="text-align:center;">注解信息会被写入到Javadoc</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">@Repeatable</td><td style="text-align:center;">同一注解可在同一声明前重复使用</td><td style="text-align:center;">RepeatedValues</td></tr></tbody></table><p><strong>(4)JDK内置注解</strong>： 由编译器使用的注解，不影响代码功能逻辑</p><table><thead><tr><th style="text-align:center;">注解名</th><th style="text-align:center;">功能</th><th style="text-align:center;">适用范围</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>@Override</strong></td><td style="text-align:center;">指定重写方法，编译器检查报错</td><td style="text-align:center;">方法</td></tr><tr><td style="text-align:center;">@Deprecated</td><td style="text-align:center;">标记过时元素，编译器警告</td><td style="text-align:center;">类、方法等</td></tr><tr><td style="text-align:center;">@SuppressWarnings</td><td style="text-align:center;">忽略编译器警告</td><td style="text-align:center;">参数<code>deprecation、unchecked、fallthrough、path、serial、finally、all</code></td></tr><tr><td style="text-align:center;">@SafeVarargs</td><td style="text-align:center;">抑制堆污染警告</td><td style="text-align:center;">方法、函数</td></tr><tr><td style="text-align:center;">@FunctionalInterface</td><td style="text-align:center;">标记接口为函数式接口（只有一个抽象方法）</td><td style="text-align:center;">接口</td></tr></tbody></table><p><strong>(5)注解提取与处理</strong>: 注解的提取和处理都需要借助Java强大的反射机制来实现，反射机制提供了一系列注解相关的方法</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">isAnnotationPresent()</td><td style="text-align:center;">判断是否应用某注解</td></tr><tr><td style="text-align:left;">getAnnotations()</td><td style="text-align:center;">返回所有注解</td></tr><tr><td style="text-align:left;">getDeclaredAnnotations()</td><td style="text-align:center;">返回直接作用于对象的所有注解</td></tr><tr><td style="text-align:left;">getAnnotation()</td><td style="text-align:center;">返回指定类型注解</td></tr><tr><td style="text-align:left;">getDeclaredAnnotation()</td><td style="text-align:center;">返回直接作用于对象的指定类型注解</td></tr><tr><td style="text-align:left;">getAnnotationsByType()</td><td style="text-align:center;">返回指定类型的所有注解</td></tr><tr><td style="text-align:left;">getDeclaredAnnotationsByType()</td><td style="text-align:center;">返回直接作用于对象的指定类型的所有注解</td></tr></tbody></table>`,73),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","JavaReview2.html.vue"]]),d=JSON.parse('{"path":"/posts/study/JavaReview2.html","title":"Java基础复习-JDK基础","lang":"zh-CN","frontmatter":{"date":"2024-05-15T00:00:00.000Z","category":["学习"],"tag":["面试","Java"],"star":false,"sticky":false,"sidebar":false,"breadcrumb":false,"footer":"I will reach the star.","description":"Java基础复习-JDK基础 由于基础的东西很多、很杂，所以这里也只能是想到什么是什么 1.OOP（面向对象） 面向对象是一种重要的软件开发思想，将待解决的问题通过对象的设计进行解决。 OOP有四个重要的特性： 封装：类的信息被隐藏在类内部，一般不允许外部直接去访问类的数据，而是通过类的方法进行访问和操作。 继承：继承是通过已有的父类派生新的子类，子类...","head":[["meta",{"property":"og:url","content":"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/posts/study/JavaReview2.html"}],["meta",{"property":"og:site_name","content":"宙宇空"}],["meta",{"property":"og:title","content":"Java基础复习-JDK基础"}],["meta",{"property":"og:description","content":"Java基础复习-JDK基础 由于基础的东西很多、很杂，所以这里也只能是想到什么是什么 1.OOP（面向对象） 面向对象是一种重要的软件开发思想，将待解决的问题通过对象的设计进行解决。 OOP有四个重要的特性： 封装：类的信息被隐藏在类内部，一般不允许外部直接去访问类的数据，而是通过类的方法进行访问和操作。 继承：继承是通过已有的父类派生新的子类，子类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:08:36.000Z"}],["meta",{"property":"article:author","content":"Unisky"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:08:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础复习-JDK基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:08:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Unisky\\"}]}"]]},"headers":[{"level":2,"title":"1.OOP（面向对象）","slug":"_1-oop-面向对象","link":"#_1-oop-面向对象","children":[]},{"level":2,"title":"2.反射","slug":"_2-反射","link":"#_2-反射","children":[]},{"level":2,"title":"3.序列化和反序列化","slug":"_3-序列化和反序列化","link":"#_3-序列化和反序列化","children":[]},{"level":2,"title":"4.接口和抽象类的区别","slug":"_4-接口和抽象类的区别","link":"#_4-接口和抽象类的区别","children":[]},{"level":2,"title":"5.final和static关键词","slug":"_5-final和static关键词","link":"#_5-final和static关键词","children":[]},{"level":2,"title":"6.浅拷贝和深拷贝","slug":"_6-浅拷贝和深拷贝","link":"#_6-浅拷贝和深拷贝","children":[]},{"level":2,"title":"7.Java创建对象的4个方式","slug":"_7-java创建对象的4个方式","link":"#_7-java创建对象的4个方式","children":[]},{"level":2,"title":"8.泛型","slug":"_8-泛型","link":"#_8-泛型","children":[]},{"level":2,"title":"9.基本数据类型","slug":"_9-基本数据类型","link":"#_9-基本数据类型","children":[]},{"level":2,"title":"10.装箱和拆箱","slug":"_10-装箱和拆箱","link":"#_10-装箱和拆箱","children":[]},{"level":2,"title":"11.注解","slug":"_11-注解","link":"#_11-注解","children":[]}],"git":{"createdTime":1725610116000,"updatedTime":1725610116000,"contributors":[{"name":"Xavoric","email":"3024008334@qq.com","commits":1}]},"readingTime":{"minutes":10.95,"words":3286},"filePathRelative":"posts/study/JavaReview2.md","localizedDate":"2024年5月15日","excerpt":"\\n<p>由于基础的东西很多、很杂，所以这里也只能是想到什么是什么</p>\\n<h2>1.OOP（面向对象）</h2>\\n<p>面向对象是一种重要的软件开发思想，将待解决的问题通过对象的设计进行解决。</p>\\n<p>OOP有四个重要的特性：</p>\\n<ul>\\n<li><strong>封装</strong>：类的信息被隐藏在类内部，一般不允许外部直接去访问类的数据，而是通过类的方法进行访问和操作。</li>\\n<li><strong>继承</strong>：继承是通过已有的父类派生新的子类，子类可以继承父类本来的属性、方法和特性，并可以在其基础上进行扩展。Java类只能继承<strong>一个</strong>非final类。</li>\\n<li><strong>多态</strong>：多态是指在不改变代码的情况下，改变运行指定的代码部分从而实现不同的功能。多态的三个重要要素是<em>继承</em>、<em>重写</em>、<em>父类引用指向子类对象</em>。重载方法可以在同一个类中根据不同的参数列表执行不同的方法主体，子类重写父类方法可以通过对象的实际类型来执行相应的方法。</li>\\n<li><strong>抽象</strong>：将客观的事物通过代码抽象出来，抽象类、抽象方法。</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
