import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as o,a as t,b as n,d as c,e}from"./app-DrMrOvds.js";const r={},p=e('<h2 id="syntax-parser-report" tabindex="-1"><a class="header-anchor" href="#syntax-parser-report"><span>Syntax Parser Report</span></a></h2><h3 id="_1、motivation-content-description" tabindex="-1"><a class="header-anchor" href="#_1、motivation-content-description"><span>1、Motivation &amp; Content description</span></a></h3><p>Build a syntax parser program to read stream of characters and CFG and show the sequence of devirations by using top-down syntax analyzing method.</p><p><strong>Requirements:</strong></p><p>(1) Input</p><p>  Stream of characters   CFG(Combination of CFGs of some classes of sentences)</p><p>(2) Output</p><p>  Sequence of derivations if top-down syntax analyzing methods are used.   Sequence of reductions if bottom-up syntax analyzing methods are used.</p><p>(3)Types of sentencial forms are defined by yourself</p><p>(4)Error handling may be included</p><h3 id="_2、method" tabindex="-1"><a class="header-anchor" href="#_2、method"><span>2、Method</span></a></h3><p>Programming based on LL(1) parsing table:</p><p>(a)Construct LL(1) parsing table based on the CFG</p><p>(b)Design the program using LL(1) paring table</p><p>Firstly, read stream of characters one by one till it cannot be read. In this way we can get a word or a symbol. By reading LL(1) table, the program will decide what should do next, including shift, reduce and accept.</p><p>In reading process, analyzer will make sure what is reading (word, number, string, ...). Analyzer will read and write in different way at each state.</p><p>To handle errors, when analyzer meets problem, it will stop analyzing and throw the reason of the error. The type of error includes illegal attributes, unclosed strings and others.</p><h3 id="_3、assumptions" tabindex="-1"><a class="header-anchor" href="#_3、assumptions"><span>3、Assumptions</span></a></h3><p><em>Note: Sentencial forms in this program mainly come from Java.</em> The types of sentential forms include below:</p><p><strong>assignment, condition control, loop(for, while), boolean expression, algebraic expression, comparison...</strong></p><p>Here is an example, which is similar to the running case.</p><p>Based on those types of sentential forms, define some CFGs initially:</p>',22),d=t("p",null,[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"G"),t("mo",null,"="),t("mo",{stretchy:"false"},"("),t("msub",null,[t("mi",null,"V"),t("mi",null,"N")]),t("mo",{separator:"true"},","),t("msub",null,[t("mi",null,"V"),t("mi",null,"T")]),t("mo",{separator:"true"},","),t("mi",null,"P"),t("mo",{separator:"true"},","),t("mi",null,"S"),t("mo",{stretchy:"false"},")")]),t("annotation",{encoding:"application/x-tex"},"G=(V_N,V_T,P,S)")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6833em"}}),t("span",{class:"mord mathnormal"},"G"),t("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),t("span",{class:"mopen"},"("),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.3283em"}},[t("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.3283em"}},[t("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.13889em"}},"T")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),t("span",{class:"mclose"},")")])])])],-1),m=t("p",null,[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msub",null,[t("mi",null,"V"),t("mi",null,"T")])]),t("annotation",{encoding:"application/x-tex"},"V_T")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.3283em"}},[t("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.13889em"}},"T")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])])])])]),n("={ identifier, value, if, else, while, do, (, ), {, }, true, false, !, ||, &&, +, -, *, /, %, <, >, <=, >=, ==, !=, =}")],-1),u=t("p",{"A,":"","B,":"","C,":"","E,":"","F,":"","T,":"","op,":"",R:""},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msub",null,[t("mi",null,"V"),t("mi",null,"N")])]),t("annotation",{encoding:"application/x-tex"},"V_N")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.3283em"}},[t("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])])])])]),n("=")],-1),g=e(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">S</span> → <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span><span class="token class-name">S</span> <span class="token keyword">else</span> <span class="token class-name">S</span> <span class="token operator">|</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token class-name">S</span> <span class="token operator">|</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token class-name">S</span> <span class="token operator">|</span> <span class="token keyword">do</span> <span class="token class-name">S</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token class-name">S</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token class-name">R</span><span class="token operator">=</span><span class="token class-name">E</span>
<span class="token class-name">A</span> → <span class="token class-name">A</span> <span class="token operator">||</span> <span class="token class-name">B</span> <span class="token operator">|</span> <span class="token class-name">B</span>
<span class="token class-name">B</span> → <span class="token class-name">B</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">C</span> <span class="token operator">|</span> <span class="token class-name">C</span>
<span class="token class-name">C</span> → <span class="token operator">!</span><span class="token class-name">C</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token class-name">E</span> op <span class="token class-name">E</span>
<span class="token class-name">E</span> → <span class="token class-name">E</span> <span class="token operator">+</span> <span class="token class-name">F</span> <span class="token operator">|</span> <span class="token class-name">E</span> <span class="token operator">-</span> <span class="token class-name">F</span> <span class="token operator">|</span> <span class="token class-name">F</span>
<span class="token class-name">F</span> → <span class="token class-name">F</span> <span class="token operator">*</span> <span class="token class-name">G</span> <span class="token operator">|</span> <span class="token class-name">F</span> <span class="token operator">/</span> <span class="token class-name">G</span> <span class="token operator">|</span> <span class="token class-name">G</span>
<span class="token class-name">G</span> → identifier <span class="token operator">|</span> value
op → <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;=</span> <span class="token operator">|</span> <span class="token operator">&gt;=</span> <span class="token operator">|</span> <span class="token operator">==</span> <span class="token operator">|</span> <span class="token operator">!=</span>
<span class="token class-name">R</span> → identifier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、build-ll-1-parsing-table" tabindex="-1"><a class="header-anchor" href="#_4、build-ll-1-parsing-table"><span>4、build LL(1) parsing table</span></a></h3><p>(1)CFG handle For the initial CFGs, we need to eilminate left recursion and extract maximum common left factors.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">S</span> → <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token class-name">S</span> <span class="token class-name">S</span>&#39; <span class="token operator">|</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token class-name">S</span> <span class="token operator">|</span> <span class="token keyword">do</span> <span class="token class-name">S</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span><span class="token operator">|</span> <span class="token class-name">R</span><span class="token operator">=</span><span class="token class-name">E</span>
<span class="token class-name">S</span>&#39; → <span class="token keyword">else</span> <span class="token class-name">S</span> <span class="token operator">|</span> $\\epsilon$
<span class="token class-name">A</span> → <span class="token constant">BA</span>&#39;
<span class="token class-name">A</span>&#39; → <span class="token operator">||</span> <span class="token constant">BA</span>&#39; <span class="token operator">|</span> $\\epsilon$
<span class="token class-name">B</span> → <span class="token constant">CB</span>&#39;
<span class="token class-name">B</span>&#39; → <span class="token operator">&amp;&amp;</span> <span class="token constant">CB</span>&#39; <span class="token operator">|</span> $\\epsilon$
<span class="token class-name">C</span> → <span class="token operator">!</span><span class="token class-name">C</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token class-name">E</span> op <span class="token class-name">E</span>
<span class="token class-name">E</span> → <span class="token constant">FE</span>&#39;
<span class="token class-name">E</span>&#39; → <span class="token operator">+</span> <span class="token constant">FE</span>&#39; <span class="token operator">|</span> <span class="token operator">-</span> <span class="token constant">FE</span>&#39; <span class="token operator">|</span> $\\epsilon$
<span class="token class-name">F</span> → <span class="token constant">GF</span>&#39;
<span class="token class-name">F</span>&#39; → <span class="token operator">*</span> <span class="token constant">GF</span>&#39; <span class="token operator">|</span> <span class="token operator">/</span> <span class="token constant">GF</span>&#39; <span class="token operator">|</span> $\\epsilon$
<span class="token class-name">G</span> → identifier <span class="token operator">|</span> value
op → <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;=</span> <span class="token operator">|</span> <span class="token operator">&gt;=</span> <span class="token operator">|</span> <span class="token operator">==</span> <span class="token operator">|</span> <span class="token operator">!=</span>
<span class="token class-name">R</span> → identifier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)Compute the First Set and Follow Set</p>`,5),y=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}}),t("th",{style:{"text-align":"center"}},"First"),t("th",{style:{"text-align":"center"}},"Follow")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"center"}},"S"),t("td",{style:{"text-align":"center"}},"if, do, while, identifier, {"),t("td",{style:{"text-align":"center"}},"else, while, #, }")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"S'"),t("td",{style:{"text-align":"center"}},[n("else, "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])]),t("td",{style:{"text-align":"center"}},"#")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"A"),t("td",{style:{"text-align":"center"}},"!, (, true, false, identifier, value"),t("td",{style:{"text-align":"center"}},")")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"A'"),t("td",{style:{"text-align":"center"}},[n("||, "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])]),t("td",{style:{"text-align":"center"}},"#")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"B"),t("td",{style:{"text-align":"center"}},"!, (, true, false, identifier, value"),t("td",{style:{"text-align":"center"}},"||, #")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"B'"),t("td",{style:{"text-align":"center"}},[n("&&, "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])]),t("td",{style:{"text-align":"center"}},"#")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"C"),t("td",{style:{"text-align":"center"}},"!, (, true, false, identifier, value"),t("td",{style:{"text-align":"center"}},"&&, #")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"E"),t("td",{style:{"text-align":"center"}},"identifier, value"),t("td",{style:{"text-align":"center"}},"<, >, <=, >=, ==, !=, #")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"E'"),t("td",{style:{"text-align":"center"}},[n("+, -, "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])]),t("td",{style:{"text-align":"center"}},"#")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"F"),t("td",{style:{"text-align":"center"}},"identifier, value"),t("td",{style:{"text-align":"center"}},"+, -, #")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"F'"),t("td",{style:{"text-align":"center"}},[n("*, /, "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])]),t("td",{style:{"text-align":"center"}},"#")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"G"),t("td",{style:{"text-align":"center"}},"identifier, value"),t("td",{style:{"text-align":"center"}},"*, /, #")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"op"),t("td",{style:{"text-align":"center"}},"<, >, <=, >=, ==, !="),t("td",{style:{"text-align":"center"}},"identifier, value")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"R"),t("td",{style:{"text-align":"center"}},"identifier"),t("td",{style:{"text-align":"center"}},"=")])])],-1),h=e('<p>(3)Construct LL(1) parsing table <em>Note:Because the table is too large, some columns are combined(different production will be combined too), and the whole table is devided into 2 tables.&quot;id&quot; is &quot;identifier&quot;, &quot;v&quot; is &quot;value&quot;, &quot;i&quot; is &quot;if&quot;, &quot;e&quot; is &quot;else&quot;, &quot;d&quot; is &quot;do&quot;, &quot;w&quot; is &quot;while&quot;, &quot;t&quot; is &quot;true&quot;, &quot;f&quot; is &quot;false&quot;</em></p><p><em><strong>Table1:</strong></em></p><hr><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">id</th><th style="text-align:center;">v</th><th style="text-align:center;">i</th><th style="text-align:center;">e</th><th style="text-align:center;">d</th><th style="text-align:center;">w</th><th style="text-align:center;">t</th><th style="text-align:center;">f</th></tr></thead><tbody><tr><td style="text-align:center;">S</td><td style="text-align:center;">S→R=E</td><td style="text-align:center;"></td><td style="text-align:center;">S→i(A)SS&#39;</td><td style="text-align:center;"></td><td style="text-align:center;">S→dSw(A)</td><td style="text-align:center;">S→w(A)S</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">S&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">S&#39;→eS</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">A</td><td style="text-align:center;">A→BA&#39;</td><td style="text-align:center;">A→BA&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">A→BA&#39;</td><td style="text-align:center;">A→BA&#39;</td></tr><tr><td style="text-align:center;">A&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">B</td><td style="text-align:center;">B→CB&#39;</td><td style="text-align:center;">B→CB&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">B→CB&#39;</td><td style="text-align:center;">B→CB&#39;</td></tr><tr><td style="text-align:center;">B&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">C</td><td style="text-align:center;">C→E op E</td><td style="text-align:center;">C→E op E</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">C→t</td><td style="text-align:center;">C→f</td></tr><tr><td style="text-align:center;">E</td><td style="text-align:center;">E→FE&#39;</td><td style="text-align:center;">E→FE&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">E&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">F</td><td style="text-align:center;">F→GF&#39;</td><td style="text-align:center;">F→GF&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">F&#39;</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">G</td><td style="text-align:center;">G→id</td><td style="text-align:center;">G→v</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">op</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">R</td><td style="text-align:center;">R→id</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p><em><strong>Table2:</strong></em></p><hr>',6),k=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}}),t("th",{style:{"text-align":"center"}},"+,-"),t("th",{style:{"text-align":"center"}},"*,/"),t("th",{style:{"text-align":"center"}},"<,>,...,!="),t("th",{style:{"text-align":"center"}},"||"),t("th",{style:{"text-align":"center"}},"&&"),t("th",{style:{"text-align":"center"}},"="),t("th",{style:{"text-align":"center"}},"("),t("th",{style:{"text-align":"center"}},")"),t("th",{style:{"text-align":"center"}},"!"),t("th",{style:{"text-align":"center"}},"#")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"center"}},"S"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"acc")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"S'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},[n("S'→"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"A"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"A→BA'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"A→BA'"),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"A'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"A'→||BA'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},[n("A'→"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"B"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"B→CB'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"B→CB'"),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"B'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"B'→&&CB'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},[n("B'→"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"C"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"C→(A)"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"C→!C"),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"E"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"E'"),t("td",{style:{"text-align":"center"}},"E'→ +FE' | -FE'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},[n("E'→"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"F"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"F'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"F'→ *GF' | /GF'"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},[n("F'→"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"ϵ")]),t("annotation",{encoding:"application/x-tex"},"\\epsilon")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.4306em"}}),t("span",{class:"mord mathnormal"},"ϵ")])])])])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"G"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"op"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}},"op→<|...|!="),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}})]),t("tr",null,[t("td",{style:{"text-align":"center"}},"R"),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}}),t("td",{style:{"text-align":"center"}})])])],-1),x=e(`<h3 id="_5、code-description" tabindex="-1"><a class="header-anchor" href="#_5、code-description"><span>5、Code Description</span></a></h3><p><em>Note: This lab&#39;s code is based on Java</em> (1) Data Structures In this program, there is a <strong>ParseTable</strong> class used to store LL(1) table. In this class, I use 2 ArrayList to store the symbol of lines and rows, and a 2-D array to store the table content. To calculate LL(1) table, I use 2 HashMaps to store First set and Follow set. The map&#39;s key is nonterminal, and the value is an arraylist of terminals.</p><p>(2) Algorithm: a.Handle productions: For each initial production, we need to eilminate left recursion and extract maximum common left factors. First to elimate left recursion, find the first symbol in the production&#39;s content, if it is same to the begin symbol, elimate it by the rule. This should be applied on every nonterminals and get temporary productions. Then to find new productions&#39; maximum common left factors and combine them. Old productions should be deleted and new modified productions should be added.</p><p>b.Calculate First Set: For each nonterminal, use a method to find its first symbol in productions. If the first symbol is terminal, add it to its first set, otherwise find the symbol&#39;s first set recursively, and add the whole symbol&#39;s first set into self&#39;s first set. Every nonterminal&#39;s first set should be calculated.</p><p>c.Calculate Follow Set: For each production, read it and find nonterminals, if a nonterminal is before a terminal, add the terminal to its follow set. If a nonterminal is before a nonterminal, add the nonterminal&#39;s first set (except &quot;#&quot;) to its follow set. If a production ends with a nonterminal, add (...-&gt;#) to its follow set. Every production should be read. Then read again, if a production ends with a nonterminal, add the follow set of the produciton&#39;s begin to that nonterminal&#39;s follow set.</p><p>d.Build LL(1) parsing table: Follow the rule, firstly fill productions into parsetable by first set. Then, if a first set includes &quot;#&quot;, add (...-&gt;#) into the table by follow set.</p><p>e.Analyze: Firstly, read input and devided the input into terminals and store them into an ArrayList (will be used as a queue).Then push &quot;#&quot; and &quot;S&quot; into the stack, then start analyzing. During the analyze, the &quot;OUTPUT&quot; is defined by LL(1) table, if the top of the stack is equal to the queue&#39;s first, we&#39;ll get &quot;MATCH&quot;. If the stack and queue are both empty (only &quot;#&quot; left), the analyze will end with &quot;ACCEPT&quot;.</p><p>(3) Running Case</p><p>In the CFG.txt, first line is terminals, second line is nonterminals, and the rest is the whole CFG. <em><strong>CFG.txt</strong></em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>identifier<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">if</span><span class="token punctuation">,</span> <span class="token keyword">else</span><span class="token punctuation">,</span> <span class="token keyword">while</span><span class="token punctuation">,</span> <span class="token keyword">do</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">,</span> <span class="token operator">||</span><span class="token punctuation">,</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">%</span><span class="token punctuation">,</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">,</span> <span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token operator">&lt;=</span><span class="token punctuation">,</span> <span class="token operator">&gt;=</span><span class="token punctuation">,</span> <span class="token operator">==</span><span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token punctuation">,</span> <span class="token operator">=</span>
<span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">G</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token class-name">R</span>
<span class="token class-name">S</span> <span class="token operator">-&gt;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span><span class="token class-name">S</span> <span class="token keyword">else</span> <span class="token class-name">S</span> 
<span class="token class-name">S</span> <span class="token operator">-&gt;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span><span class="token class-name">S</span> 
<span class="token class-name">S</span> <span class="token operator">-&gt;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token class-name">S</span> 
<span class="token class-name">S</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span> <span class="token class-name">S</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> 
<span class="token class-name">S</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">S</span><span class="token punctuation">}</span> 
<span class="token class-name">S</span> <span class="token operator">-&gt;</span> <span class="token class-name">R</span><span class="token operator">=</span><span class="token class-name">E</span>
<span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">A</span> <span class="token operator">||</span> <span class="token class-name">B</span> 
<span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">B</span>
<span class="token class-name">B</span> <span class="token operator">-&gt;</span> <span class="token class-name">B</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">C</span> 
<span class="token class-name">B</span> <span class="token operator">-&gt;</span> <span class="token class-name">C</span>
<span class="token class-name">C</span> <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token class-name">C</span> 
<span class="token class-name">C</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> 
<span class="token class-name">C</span> <span class="token operator">-&gt;</span> <span class="token boolean">true</span> 
<span class="token class-name">C</span> <span class="token operator">-&gt;</span> <span class="token boolean">false</span> 
<span class="token class-name">C</span> <span class="token operator">-&gt;</span> <span class="token class-name">E</span> op <span class="token class-name">E</span>
<span class="token class-name">E</span> <span class="token operator">-&gt;</span> <span class="token class-name">E</span> <span class="token operator">+</span> <span class="token class-name">F</span> 
<span class="token class-name">E</span> <span class="token operator">-&gt;</span> <span class="token class-name">E</span> <span class="token operator">-</span> <span class="token class-name">F</span> 
<span class="token class-name">E</span> <span class="token operator">-&gt;</span> <span class="token class-name">F</span>
<span class="token class-name">F</span> <span class="token operator">-&gt;</span> <span class="token class-name">F</span> <span class="token operator">*</span> <span class="token class-name">G</span> 
<span class="token class-name">F</span> <span class="token operator">-&gt;</span> <span class="token class-name">F</span> <span class="token operator">/</span> <span class="token class-name">G</span> 
<span class="token class-name">F</span> <span class="token operator">-&gt;</span> <span class="token class-name">G</span>
<span class="token class-name">G</span> <span class="token operator">-&gt;</span> identifier 
<span class="token class-name">G</span> <span class="token operator">-&gt;</span> value
op <span class="token operator">-&gt;</span> <span class="token operator">&lt;</span> 
op <span class="token operator">-&gt;</span> <span class="token operator">&gt;</span> 
op <span class="token operator">-&gt;</span> <span class="token operator">&lt;=</span> 
op <span class="token operator">-&gt;</span> <span class="token operator">&gt;=</span> 
op <span class="token operator">-&gt;</span> <span class="token operator">==</span> 
op <span class="token operator">-&gt;</span> <span class="token operator">!=</span>
<span class="token class-name">R</span> <span class="token operator">-&gt;</span> identifier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>input.txt</strong></em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(4) Running Result</p><p><em><strong>output.txt</strong></em></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>OUTPUT: S-&gt;if(A)SS&#39;
MATCH: if
MATCH: (
OUTPUT: A-&gt;BA&#39;
OUTPUT: B-&gt;CB&#39;
OUTPUT: C-&gt;EopE
OUTPUT: E-&gt;FE&#39;
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;identifier
MATCH: identifier
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;#
OUTPUT: op-&gt;&lt;
MATCH: &lt;
OUTPUT: E-&gt;FE&#39;
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;value
MATCH: value
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;#
OUTPUT: B&#39;-&gt;&amp;&amp;CB&#39;
MATCH: &amp;&amp;
OUTPUT: C-&gt;true
MATCH: true
OUTPUT: B&#39;-&gt;#
OUTPUT: A&#39;-&gt;#
MATCH: )
OUTPUT: S-&gt;{S}
MATCH: {
OUTPUT: S-&gt;R=E
OUTPUT: R-&gt;identifier
MATCH: identifier
MATCH: =
OUTPUT: E-&gt;FE&#39;
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;identifier
MATCH: identifier
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;+FE&#39;
MATCH: +
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;value
MATCH: value
OUTPUT: F&#39;-&gt;*GF&#39;
MATCH: *
OUTPUT: G-&gt;value
MATCH: value
OUTPUT: F&#39;-&gt;/GF&#39;
MATCH: /
OUTPUT: G-&gt;value
MATCH: value
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;#
MATCH: }
OUTPUT: S&#39;-&gt;elseS
MATCH: else
OUTPUT: S-&gt;{S}
MATCH: {
OUTPUT: S-&gt;while(A)S
MATCH: while
MATCH: (
OUTPUT: A-&gt;BA&#39;
OUTPUT: B-&gt;CB&#39;
OUTPUT: C-&gt;EopE
OUTPUT: E-&gt;FE&#39;
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;identifier
MATCH: identifier
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;#
OUTPUT: op-&gt;&gt;=
MATCH: &gt;=
OUTPUT: E-&gt;FE&#39;
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;value
MATCH: value
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;#
OUTPUT: B&#39;-&gt;#
OUTPUT: A&#39;-&gt;||BA&#39;
MATCH: ||
OUTPUT: B-&gt;CB&#39;
OUTPUT: C-&gt;false
MATCH: false
OUTPUT: B&#39;-&gt;#
OUTPUT: A&#39;-&gt;#
MATCH: )
OUTPUT: S-&gt;{S}
MATCH: {
OUTPUT: S-&gt;R=E
OUTPUT: R-&gt;identifier
MATCH: identifier
MATCH: =
OUTPUT: E-&gt;FE&#39;
OUTPUT: F-&gt;GF&#39;
OUTPUT: G-&gt;value
MATCH: value
OUTPUT: F&#39;-&gt;#
OUTPUT: E&#39;-&gt;#
MATCH: }
MATCH: }
ACCEPT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、problems-and-comments" tabindex="-1"><a class="header-anchor" href="#_6、problems-and-comments"><span>6、Problems and Comments</span></a></h3><p>(1)Problems and Solutions: In this lab, the hardest part is to build LL(1) table. To make it easier, I transfer the CFG&#39;s productions into unified formatted productions. There are different methos with different using in the program, such as get first symbol, get common factor. When I&#39;m about to finish the lab, I realize that I can use an easier way to store the information of CFG, use a hashmap or arraylist to store CFG so that I don&#39;t have to read the character to find the symbol again and again.</p><p>(2)Feelings and Comments: In this lab, I use the code to finish the process of building LL(1) parsing table and LL(1) analyzing, of course is that it&#39;s much harder than solve it by writing. During the coding, I met some problem that never occurs in writing so it took me a lot time to make it correct. So it&#39;s important to learn the method in both writing and coding.</p><p>After finishing the lab, I have more understanding of top-down analyzing, and I improve the ability of calculating first set and follow set to build a correct LL(1) parsing table.</p><h3 id="_7-how-to-use" tabindex="-1"><a class="header-anchor" href="#_7-how-to-use"><span>7.How to Use?</span></a></h3>`,20),v={href:"https://github.com/Xavoric/Syntax-Analyzer",target:"_blank",rel:"noopener noreferrer"},b=t("p",null,"(2). In the CFG.txt, give your own CFG. Line 1 should contain terminal and Line 2 should contain nonterminal, then each line contains one production.",-1),T=t("p",null,"(3). In the input.txt, give your code.",-1),f=t("p",null,"(3). Check the file address in the code whether it is right.",-1),w=t("p",null,"(5). Run.",-1),U=t("h3",{id:"tips",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#tips"},[t("span",null,"TIPS")])],-1),C=t("p",null,"懒得翻译第二弹，鬼知道我当时怎么写的这一坨",-1);function F(A,_){const s=l("ExternalLinkIcon");return i(),o("div",null,[p,d,m,u,g,y,h,k,x,t("p",null,[n("(1). You can get the source code "),t("a",v,[n("here"),c(s)])]),b,T,f,w,U,C])}const M=a(r,[["render",F],["__file","compile_lab2.html.vue"]]),E=JSON.parse('{"path":"/posts/study/compile_lab2.html","title":"编译原理-语法分析器","lang":"zh-CN","frontmatter":{"title":"编译原理-语法分析器","date":"2024-03-18T00:00:00.000Z","study":true,"category":["学习"],"tag":["编译原理","Java","English-Only"],"star":false,"sticky":false,"sidebar":false,"breadcrumb":false,"footer":"I will reach the star.","description":"Syntax Parser Report 1、Motivation & Content description Build a syntax parser program to read stream of characters and CFG and show the sequence of devirations by using top-down...","head":[["meta",{"property":"og:url","content":"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/posts/study/compile_lab2.html"}],["meta",{"property":"og:site_name","content":"宙宇空"}],["meta",{"property":"og:title","content":"编译原理-语法分析器"}],["meta",{"property":"og:description","content":"Syntax Parser Report 1、Motivation & Content description Build a syntax parser program to read stream of characters and CFG and show the sequence of devirations by using top-down..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:08:36.000Z"}],["meta",{"property":"article:author","content":"Unisky"}],["meta",{"property":"article:tag","content":"编译原理"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"English-Only"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:08:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译原理-语法分析器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:08:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Unisky\\"}]}"]]},"headers":[{"level":2,"title":"Syntax Parser Report","slug":"syntax-parser-report","link":"#syntax-parser-report","children":[{"level":3,"title":"1、Motivation & Content description","slug":"_1、motivation-content-description","link":"#_1、motivation-content-description","children":[]},{"level":3,"title":"2、Method","slug":"_2、method","link":"#_2、method","children":[]},{"level":3,"title":"3、Assumptions","slug":"_3、assumptions","link":"#_3、assumptions","children":[]},{"level":3,"title":"4、build LL(1) parsing table","slug":"_4、build-ll-1-parsing-table","link":"#_4、build-ll-1-parsing-table","children":[]},{"level":3,"title":"5、Code Description","slug":"_5、code-description","link":"#_5、code-description","children":[]},{"level":3,"title":"6、Problems and Comments","slug":"_6、problems-and-comments","link":"#_6、problems-and-comments","children":[]},{"level":3,"title":"7.How to Use?","slug":"_7-how-to-use","link":"#_7-how-to-use","children":[]},{"level":3,"title":"TIPS","slug":"tips","link":"#tips","children":[]}]}],"git":{"createdTime":1725610116000,"updatedTime":1725610116000,"contributors":[{"name":"Xavoric","email":"3024008334@qq.com","commits":1}]},"readingTime":{"minutes":6,"words":1801},"filePathRelative":"posts/study/compile_lab2.md","localizedDate":"2024年3月18日","excerpt":"<h2>Syntax Parser Report</h2>\\n<h3>1、Motivation &amp; Content description</h3>\\n<p>Build a syntax parser program to read stream of characters and CFG and show the sequence of devirations by using top-down syntax analyzing method.</p>\\n<p><strong>Requirements:</strong></p>\\n<p>(1) Input</p>\\n<p>  Stream of characters\\n  CFG(Combination of CFGs of some classes of sentences)</p>","autoDesc":true}');export{M as comp,E as data};
