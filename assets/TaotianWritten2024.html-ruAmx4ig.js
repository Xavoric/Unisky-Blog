import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,e as n,a as s,b as a}from"./app-DrMrOvds.js";const i="/Unisky-Blog/assets/designPattern-B-DxyCh-.png",p="/Unisky-Blog/assets/chmod-Dac29lV5.png",c={},o=n('<h1 id="阿里淘天实习生笔试经历" tabindex="-1"><a class="header-anchor" href="#阿里淘天实习生笔试经历"><span>阿里淘天实习生笔试经历</span></a></h1><h2 id="_0-笔试过程" tabindex="-1"><a class="header-anchor" href="#_0-笔试过程"><span>0.笔试过程</span></a></h2><p>笔试是在牛客网进行线上笔试，100分钟完成十五道选择题加三道编程题。其中选择题包括13道基础题，一半单选，一半不定项。再加一道指定语言（C++,Java，JS）的单选和一道不定项。我选的是Java的两道题</p><p>选择题考得比较基础，但是由于基本都是理论，所以很多题都拿不准。编程题离大谱，感觉都不像正常题。</p><h2 id="_1-选择题" tabindex="-1"><a class="header-anchor" href="#_1-选择题"><span>1.选择题</span></a></h2><p>选择题涉及的内容比较宽泛，包括以下内容：</p><ul><li>图论，最小代价生成树，Prim算法（从指定顶点开始，逐个寻找最短权值的与已构建图的相邻边）</li><li>TCP/IP协议的特点</li><li>完全二叉搜索树，层序遍历</li><li>设计模式，给定场景选用设计模式。哪些设计模式是行为模式</li><li>WebSocket服务器连接的关键词</li><li>Linux shell初始化数组的方式</li><li>chmod设置权限（权限，用户，其他用户）</li><li>Java类加载器</li><li>Java的static关键词，静态代码块执行顺序，静态方法能否访问非静态数据/非静态方法能否访问静态数据</li><li>文件保护措施（选项有保护表，加密，口令什么之类的，完全没接触过）</li><li>排序算法（最适合递归的是哪个）</li></ul><hr><h3 id="_1-设计模式的分类" tabindex="-1"><a class="header-anchor" href="#_1-设计模式的分类"><span>(1).设计模式的分类</span></a></h3><p>设计模式分为<strong>创建型</strong>、<strong>结构型</strong>和<strong>行为型</strong>。 具体分类如下图</p><figure><img src="'+i+`" alt="设计模式分类" tabindex="0" loading="lazy"><figcaption>设计模式分类</figcaption></figure><h3 id="_2-tcp-ip协议的特点" tabindex="-1"><a class="header-anchor" href="#_2-tcp-ip协议的特点"><span>(2).TCP/IP协议的特点</span></a></h3><ul><li>TCP（Transmission Control Protocol）传输控制协议，TCP/IP协议不依赖于任何特定的计算机硬件或者操作系统</li><li><strong>面向有连接的传输协议：</strong> 发送数据前需要建立连接，只有确认通信接收方存在时才发送数据，保证两端通信主机之间通信可达</li><li><strong>可靠传输：</strong> 为处理数据丢失的问题，TCP协议可以通过重发来实现数据的可靠性。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。这样使得通过TCP传输的数据，无差错、不丢失、不重复。但是这样会消耗大量的时间，所以其效率低。</li><li><strong>面向字节流：</strong> 数据仅被视为一串无结构字节流</li><li><strong>用途：</strong> 用于传输可靠性的通信服务</li><li><strong>点对点通信：</strong> 每条TCP连接只有两个端点，只能进行一对一连接通信</li></ul><h3 id="_3-udp协议的特点" tabindex="-1"><a class="header-anchor" href="#_3-udp协议的特点"><span>(3).UDP协议的特点</span></a></h3><ul><li>UDP（User Datagram Protocol）用户数据报协议</li><li><strong>面向无连接的传输协议：</strong> 发送前无需建立连接，减小开销和时延，需要通过应用程序检查数据包发送接受情况</li><li><strong>面向报文：</strong> 将应用层交下来的报文，保留报文边界交付给IP层</li><li><strong>不可靠传输：</strong> 无连接，只考虑发送，不考虑重发</li><li><strong>用途：</strong> 适用于高速传输和实时性要求高，而又允许数据部分丢失的通信和广播通信（如DNS，SNMP,即时通信，应用通信）</li><li><strong>无拥塞阻塞：</strong> 主机发送速率不受网络拥塞影响</li><li><strong>一对一、一对多、多对一、多对多的交互通信：</strong> 单个或者多个端点之间可以互相连接</li></ul><h3 id="_4-shell数组" tabindex="-1"><a class="header-anchor" href="#_4-shell数组"><span>(4).Shell数组</span></a></h3><p><strong>Shell数组的表示法：</strong> Shell 创建数组用括号来表示，元素用&quot;空格&quot;符号分割开</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#array_name=(value1 value2 ... valuen)</span>
<span class="token assign-left variable">my_array</span><span class="token operator">=</span><span class="token punctuation">(</span>A B <span class="token string">&quot;C&quot;</span> D<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过数组下标实现数组定义</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>array_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>value0
array_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value1
array_name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>value2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Shell数组的读取:</strong> 读取格式如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">\${array_name<span class="token punctuation">[</span>index<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 @ 或 * 可以获取数组中的所有元素 获取所有元素时，在数组名称前使用#可以获取数组长度</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
my_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>A
my_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>B
my_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>C
my_array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>D

<span class="token builtin class-name">echo</span> <span class="token string">&quot;数组的第一个元素为: <span class="token variable">\${my_array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;数组的元素为: <span class="token variable">\${my_array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;数组的元素为: <span class="token variable">\${my_array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;数组元素个数为: <span class="token variable">\${<span class="token operator">#</span>my_array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关联数组：</strong> 关联数组类似于Java中的Map,使用 declare 命令来声明，语法格式如下（&quot;-A&quot;不能省略）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">declare</span> <span class="token parameter variable">-A</span> array_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过键值访问关联数组元素</p><p>获取所有元素时，在数组前加一个!可以访问所有键值</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># declare -A array_name</span>

<span class="token builtin class-name">declare</span> <span class="token parameter variable">-A</span> site
site<span class="token punctuation">[</span><span class="token string">&quot;google&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;www.google.com&quot;</span>
site<span class="token punctuation">[</span><span class="token string">&quot;baidu&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;www.baidu.com&quot;</span>
site<span class="token punctuation">[</span><span class="token string">&quot;taobao&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;www.taobao.com&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token variable">\${site<span class="token punctuation">[</span>&quot;google&quot;<span class="token punctuation">]</span>}</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;数组的键为: <span class="token variable">\${<span class="token operator">!</span>site<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;数组的键为: <span class="token variable">\${<span class="token operator">!</span>site<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-linux-chmod命令" tabindex="-1"><a class="header-anchor" href="#_5-linux-chmod命令"><span>(5).Linux chmod命令</span></a></h3><p>chmod全称为change mode，该命令用于控制用户对文件的权限</p><p>Linux/Unix 的文件调用权限分为三级 : <strong>文件所有者(u, Owner)</strong> 、<strong>用户组(g, Group)</strong> 、<strong>其它用户(o, Other Users)</strong></p><p>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。</p><figure><img src="`+p+`" alt="Linux权限表示" tabindex="0" loading="lazy"><figcaption>Linux权限表示</figcaption></figure><p>r,w,x分别对应可读权限、可写权限和可执行权限</p><p>其中rwx可以通过二进制数表示权限情况，例如101表示r-x，开启可读、可执行权限，再将二进制转换为八进制，就可以用一个数字表示某类用户的权限情况，按照ugo的顺序可以表示权限分配情况 例如765，表示u=rwx, g=rw-, o=r-x</p><p>除了用=号直接设置权限以外，还可以通过+, -号对权限进行增减</p><p>可以用a(all)代替ugo</p><p>在Linux对某个文件file.txt设置权限的方法有以下几种：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#所有人增加可读权限</span>
<span class="token function">chmod</span> a+r file.txt
<span class="token function">chmod</span> ugo+r file.txt
<span class="token function">chmod</span> +r file.txt

<span class="token comment">#设置特定权限,u=rwx,go=r</span>
<span class="token function">chmod</span> <span class="token assign-left variable">u</span><span class="token operator">=</span>rwx, <span class="token assign-left variable">go</span><span class="token operator">=</span>r file.txt
<span class="token function">chmod</span> <span class="token number">744</span> file.txt

<span class="token comment">#向所有用户开放所有权限</span>
<span class="token function">chmod</span> +rwx file.txt
<span class="token function">chmod</span> <span class="token number">777</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-websocket" tabindex="-1"><a class="header-anchor" href="#_6-websocket"><span>(6).WebSocket</span></a></h3><p>待更新</p><h3 id="_7-java类加载器" tabindex="-1"><a class="header-anchor" href="#_7-java类加载器"><span>(7).Java类加载器</span></a></h3><p>见Java专栏</p><h3 id="_8-java的static关键词" tabindex="-1"><a class="header-anchor" href="#_8-java的static关键词"><span>(8).Java的static关键词</span></a></h3><p>见Java专栏</p><hr><h2 id="_2-编程第一题" tabindex="-1"><a class="header-anchor" href="#_2-编程第一题"><span>2.编程第一题</span></a></h2><hr><p><strong>题目描述：</strong> 给定T个数组，每个数组分别给出数组长度n和k，以及数组本身数据，要求每个数组选择其中任意k个数，这k个数能形成的最大众数是多少（若有多个众数取最大那个）。</p><p>如下列输入:</p><div class="language-input line-numbers-mode" data-ext="input" data-title="input"><pre class="language-input"><code>2
6 4
3 3 3 2 2 2
4 2
1 2 3 3 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>T=2, 第一个数组的n=6,k=4,第二个数组的n=4,k=2 输出应为：</p><div class="language-output line-numbers-mode" data-ext="output" data-title="output"><pre class="language-output"><code>3
3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解释： 第一个数组，选取[3,3,3,2]或者[3,3,2,2]能得到最大众数3 第二个数组选取[1,3],[2,3],[3,3]都能得到最大众数3</p><hr><p>第一眼一看是dp，但是状态转移想不明白，然后是排序，但是也感觉不太对。然后想到读取数组的过程用哈希表维护，记录每个数字的出现次数。 然后，然后我就不知道了，寄</p><p>顺便反思一下，没有google就不会调用Java的sort()方法了,也忘记比较器该怎么写了,开个部分复习一下</p><h3 id="java常用排序调用方法" tabindex="-1"><a class="header-anchor" href="#java常用排序调用方法"><span>Java常用排序调用方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 1.Arrays.sort(),可以传int[],float[],char[],byte[]...等
 * 只传一个数组时，对数组从小到大进行排序
 */</span>

<span class="token comment">//对数组从小到大排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//对数组下标3-6从小到大排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//降序排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 2.sort()方法,需要提供比较器方法
 */</span>

<span class="token comment">//使用lambda表达式重写比较器，令其升序排序</span>
<span class="token comment">//注意，比较器的返回值通过正负整数区分</span>
<span class="token comment">//其中返回负整数表示需要进行交换位置</span>
<span class="token comment">//返回正整数和0则保持原样</span>
arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-编程第二题" tabindex="-1"><a class="header-anchor" href="#_3-编程第二题"><span>3.编程第二题</span></a></h2><hr>`,63),r=s("p",null,[s("strong",null,"题目描述："),a(" 每行给定三个数, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",{separator:"true"},","),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"n,x,k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),a("，每一行数对应一个未知的长为n+1的数组"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"{"),s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",{stretchy:"false"},"}")]),s("annotation",{encoding:"application/x-tex"},"\\{ a_{n+1} \\}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mclose"},"}")])])]),a("，其中"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"="),s("mi",null,"x")]),s("annotation",{encoding:"application/x-tex"},"a_{n+1}=x")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6389em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x")])])]),a(",该数组满足"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mi",null,"i")]),s("mo",null,"="),s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")])]),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"a_i = a_{i+1} \\space\\space mod \\space\\space i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9028em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"i")])])]),a("，求每一行对应的数组的第k个数")],-1),m=s("hr",null,null,-1),u=s("p",null,[a("题目很简单，我们要求的是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mi",null,"k")])]),s("annotation",{encoding:"application/x-tex"},"a_k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(",而通过递推式可以直接明确")],-1),d=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mi",null,"k")]),s("mo",null,"="),s("msub",null,[s("mi",null,"a"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")])]),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("mi",null,"n"),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("mi",null,"k"),s("mo",null,"+"),s("mn",null,"1"),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"}," a_k = a_{n+1} \\space\\space mod \\space\\space n \\space\\space mod \\space\\space (n-1) \\space\\space mod \\space\\space ...\\space\\space mod \\space\\space k+1 \\space\\space mod \\space\\space k ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"..."),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])])])],-1),h=n(`<p>,即</p><div class="language-calc line-numbers-mode" data-ext="calc" data-title="calc"><pre class="language-calc"><code>a[k] = a[n+1] % n % (n-1)% ... % (k+1) % k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好，直接循环送进去，<em><strong>喜提超时</strong></em></p><p>感觉没法直接通过计算方式优化了，那么我们就考虑在循环上面进行优化。关键点在于，进行取模运算以后，得到的很有可能会是一个非常小的数，导致后面的多次取模计算都没有任何作用，所以我们只需要计算那些有效的取模运算即可。</p><p>例如9%7%6%5%4%3%2这则计算，计算完9%7=2以后，直到%2为止，都没有任何意义，所以可以直接跳过前面的%6%5%4%3直接去算%2</p><p>以此优化循环计算，完全通过</p><h2 id="_4-编程第三题" tabindex="-1"><a class="header-anchor" href="#_4-编程第三题"><span>4.编程第三题</span></a></h2><hr><p><strong>题目描述：</strong> 第一行输入数据，给定一个图的顶点数目和边数 下面每一行输入是两个顶点（加边），问每次加边后，加的这条边所在的连通块，其顶点数目是否等于边数,且不存在重边和自环。是则输出Yes,否则输出No</p><p>例:</p><div class="language-input line-numbers-mode" data-ext="input" data-title="input"><pre class="language-input"><code>5 5
1 2
1 3
2 3
4 5
4 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-output line-numbers-mode" data-ext="output" data-title="output"><pre class="language-output"><code>No
No
Yes
No
No
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面三条边添加完毕后，123三个顶点所在连通块刚好三条边，等于顶点数，所以第三行输出Yes.</p><p>第四、五条边添加完毕后，虽然这个连通块里边数等于顶点数，但是存在重边，不符合要求，所以输出No.</p><hr><p>没写完，不知道暴力dfs或者bfs能不能通过，我猜会超时。</p><p>如果这个方法不行的话，对不起，做不到.jpg</p>`,18),v=[o,r,m,u,d,h];function g(k,b){return t(),e("div",null,v)}const _=l(c,[["render",g],["__file","TaotianWritten2024.html.vue"]]),f=JSON.parse('{"path":"/posts/study/TaotianWritten2024.html","title":"阿里淘天实习生笔试经历","lang":"zh-CN","frontmatter":{"date":"2024-04-10T00:00:00.000Z","category":["学习"],"tag":["笔试","算法","数据结构"],"star":false,"sticky":false,"sidebar":false,"breadcrumb":false,"footer":"I will reach the star.","description":"阿里淘天实习生笔试经历 0.笔试过程 笔试是在牛客网进行线上笔试，100分钟完成十五道选择题加三道编程题。其中选择题包括13道基础题，一半单选，一半不定项。再加一道指定语言（C++,Java，JS）的单选和一道不定项。我选的是Java的两道题 选择题考得比较基础，但是由于基本都是理论，所以很多题都拿不准。编程题离大谱，感觉都不像正常题。 1.选择题 选...","head":[["meta",{"property":"og:url","content":"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/posts/study/TaotianWritten2024.html"}],["meta",{"property":"og:site_name","content":"宙宇空"}],["meta",{"property":"og:title","content":"阿里淘天实习生笔试经历"}],["meta",{"property":"og:description","content":"阿里淘天实习生笔试经历 0.笔试过程 笔试是在牛客网进行线上笔试，100分钟完成十五道选择题加三道编程题。其中选择题包括13道基础题，一半单选，一半不定项。再加一道指定语言（C++,Java，JS）的单选和一道不定项。我选的是Java的两道题 选择题考得比较基础，但是由于基本都是理论，所以很多题都拿不准。编程题离大谱，感觉都不像正常题。 1.选择题 选..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:08:36.000Z"}],["meta",{"property":"article:author","content":"Unisky"}],["meta",{"property":"article:tag","content":"笔试"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2024-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:08:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"阿里淘天实习生笔试经历\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:08:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Unisky\\"}]}"]]},"headers":[{"level":2,"title":"0.笔试过程","slug":"_0-笔试过程","link":"#_0-笔试过程","children":[]},{"level":2,"title":"1.选择题","slug":"_1-选择题","link":"#_1-选择题","children":[{"level":3,"title":"(1).设计模式的分类","slug":"_1-设计模式的分类","link":"#_1-设计模式的分类","children":[]},{"level":3,"title":"(2).TCP/IP协议的特点","slug":"_2-tcp-ip协议的特点","link":"#_2-tcp-ip协议的特点","children":[]},{"level":3,"title":"(3).UDP协议的特点","slug":"_3-udp协议的特点","link":"#_3-udp协议的特点","children":[]},{"level":3,"title":"(4).Shell数组","slug":"_4-shell数组","link":"#_4-shell数组","children":[]},{"level":3,"title":"(5).Linux chmod命令","slug":"_5-linux-chmod命令","link":"#_5-linux-chmod命令","children":[]},{"level":3,"title":"(6).WebSocket","slug":"_6-websocket","link":"#_6-websocket","children":[]},{"level":3,"title":"(7).Java类加载器","slug":"_7-java类加载器","link":"#_7-java类加载器","children":[]},{"level":3,"title":"(8).Java的static关键词","slug":"_8-java的static关键词","link":"#_8-java的static关键词","children":[]}]},{"level":2,"title":"2.编程第一题","slug":"_2-编程第一题","link":"#_2-编程第一题","children":[{"level":3,"title":"Java常用排序调用方法","slug":"java常用排序调用方法","link":"#java常用排序调用方法","children":[]}]},{"level":2,"title":"3.编程第二题","slug":"_3-编程第二题","link":"#_3-编程第二题","children":[]},{"level":2,"title":"4.编程第三题","slug":"_4-编程第三题","link":"#_4-编程第三题","children":[]}],"git":{"createdTime":1725610116000,"updatedTime":1725610116000,"contributors":[{"name":"Xavoric","email":"3024008334@qq.com","commits":1}]},"readingTime":{"minutes":8.53,"words":2560},"filePathRelative":"posts/study/TaotianWritten2024.md","localizedDate":"2024年4月10日","excerpt":"\\n<h2>0.笔试过程</h2>\\n<p>笔试是在牛客网进行线上笔试，100分钟完成十五道选择题加三道编程题。其中选择题包括13道基础题，一半单选，一半不定项。再加一道指定语言（C++,Java，JS）的单选和一道不定项。我选的是Java的两道题</p>\\n<p>选择题考得比较基础，但是由于基本都是理论，所以很多题都拿不准。编程题离大谱，感觉都不像正常题。</p>\\n<h2>1.选择题</h2>\\n<p>选择题涉及的内容比较宽泛，包括以下内容：</p>\\n<ul>\\n<li>图论，最小代价生成树，Prim算法（从指定顶点开始，逐个寻找最短权值的与已构建图的相邻边）</li>\\n<li>TCP/IP协议的特点</li>\\n<li>完全二叉搜索树，层序遍历</li>\\n<li>设计模式，给定场景选用设计模式。哪些设计模式是行为模式</li>\\n<li>WebSocket服务器连接的关键词</li>\\n<li>Linux shell初始化数组的方式</li>\\n<li>chmod设置权限（权限，用户，其他用户）</li>\\n<li>Java类加载器</li>\\n<li>Java的static关键词，静态代码块执行顺序，静态方法能否访问非静态数据/非静态方法能否访问静态数据</li>\\n<li>文件保护措施（选项有保护表，加密，口令什么之类的，完全没接触过）</li>\\n<li>排序算法（最适合递归的是哪个）</li>\\n</ul>","autoDesc":true}');export{_ as comp,f as data};
