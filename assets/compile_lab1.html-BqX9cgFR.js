import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,b as s,d as c,e as l}from"./app-DrMrOvds.js";const i="/Unisky-Blog/assets/image-1-DXcvDfaF.png",r="/Unisky-Blog/assets/image-10-BdpY33fJ.png",u="/Unisky-Blog/assets/image-11-57LnQyud.png",k="/Unisky-Blog/assets/image-2-CFc9BS3k.png",d="/Unisky-Blog/assets/image-13-C0fmShBZ.png",m="/Unisky-Blog/assets/image-12-Cva_hSRX.png",g={},v=l(`<h2 id="lexical-analyzer-report" tabindex="-1"><a class="header-anchor" href="#lexical-analyzer-report"><span>Lexical Analyzer Report</span></a></h2><h3 id="_1、motivation-content-description" tabindex="-1"><a class="header-anchor" href="#_1、motivation-content-description"><span>1、Motivation &amp; Content description</span></a></h3><p>Build a lexical analyzer program to read stream of characters and show the sequence of tokens.</p><p><strong>Requirements:</strong></p><p>(1) Input:</p><p>  Stream of characters</p><p>  REs(The number of REs is decided by yourself)</p><p>(2) Output: Sequence of tokens</p><p>(3) Types of tokens are defined by yourself</p><p>(4) Error handling may be included</p><h3 id="_2、method" tabindex="-1"><a class="header-anchor" href="#_2、method"><span>2、Method</span></a></h3><p>Programming based on FA:</p><p>(a) Define some REs by yourself</p><p>(b) Convert REs into NFAs</p><p>(c) Merge these NFAs into a single NFA</p><p>(d) Convert the NFA into a DFA with minimum states</p><p>(e) Programming based on the DFA</p><p>Firstly, read stream of characters one by one till it cannot be read.In this way we can get a word, if this word match to an keyword or operator that exists, define it as a keyword or operator. If not, define its type by RE.</p><p>In reading process, analyzer will make sure what is reading (word, number, string, ...). Analyzer will read and write in different way at each state.</p><p>To handle errors, when analyzer meets problem, it will stop analyzing and throw the reason of the error. The type of error includes illegal attributes, unclosed strings and others.</p><h3 id="_3、assumptions" tabindex="-1"><a class="header-anchor" href="#_3、assumptions"><span>3、Assumptions</span></a></h3><p><em>Note: Tokens in this program mainly come from Java.</em></p><p>The types of tokens include below: <strong>Keyword Operator Delimiter Identifier Integer Decimal String</strong></p><p>Here are the concrete tokens of these types</p><p>(1) Keyword:</p><blockquote><p>abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while、true、false、null、goto、const</p></blockquote><p>(2) Operator:</p><blockquote><p>+ 、- 、* 、/ 、% 、++ 、--、= 、 += 、 -= 、*= 、/= 、&gt; 、 &lt; 、 &gt;= 、&lt;= 、== 、!= 、&amp;&amp; 、||</p></blockquote><p>(3) Delimiter:</p><blockquote><p>; , . () [] {}</p></blockquote><p>(4) Identifier: Consist of letter and digit, but not begin with a digit.</p><p>(5) Integer: Consist of some digits, not begin with &quot;0&quot;.</p><p>(6) Decimal: Include 2 parts of digits, and connect with &quot;.&quot;， and fraction part don&#39;t end with &quot;0&quot;.</p><p>(7) String: Begin and end with &quot;, filled with ASCII.</p><p>(8) Unknown: Undefined tokens, will cause ERROR.</p><p>(9) Others: Letter includes &quot;a&quot; to &quot;z&quot;, &quot;A&quot; to &quot;Z&quot; and &quot;_&quot; Digit includes &quot;0&quot; to &quot;9&quot; Stream of characters will be devided by \\s(space) \\t(tab) \\n(newline)</p><h3 id="_4、re-and-fa-descriptions" tabindex="-1"><a class="header-anchor" href="#_4、re-and-fa-descriptions"><span>4、RE and FA descriptions</span></a></h3><p><strong>(1) RE definations:</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">S</span> → <span class="token class-name">Keyword</span> <span class="token operator">|</span> <span class="token class-name">Operator</span> <span class="token operator">|</span> <span class="token class-name">Delimiter</span> <span class="token operator">|</span> <span class="token class-name">Identifier</span> <span class="token operator">|</span> <span class="token class-name">Integer</span> <span class="token operator">|</span> <span class="token class-name">Decimal</span> <span class="token operator">|</span> <span class="token class-name">String</span> <span class="token operator">|</span> <span class="token class-name">Unknown</span>
<span class="token class-name">Keyword</span> → <span class="token keyword">abstract</span> <span class="token operator">|</span> <span class="token keyword">assert</span> <span class="token operator">|</span> <span class="token keyword">boolean</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token keyword">goto</span> <span class="token operator">|</span> <span class="token keyword">const</span>
<span class="token class-name">Operator</span> → <span class="token operator">+</span> <span class="token operator">|</span> <span class="token operator">-</span> <span class="token operator">|</span> \\<span class="token operator">*</span> <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token operator">|</span> <span class="token operator">&amp;&amp;</span>
<span class="token class-name">Delimiter</span> → <span class="token punctuation">;</span> <span class="token operator">|</span> <span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token operator">|</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">[</span> <span class="token operator">|</span> <span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token operator">|</span> <span class="token punctuation">}</span>
<span class="token class-name">Identifier</span> → letter <span class="token punctuation">(</span> letter <span class="token operator">|</span> digit <span class="token punctuation">)</span> \\<span class="token operator">*</span>
<span class="token class-name">Integer</span> → <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token number">9</span> <span class="token punctuation">)</span> digit \\<span class="token operator">*</span>
<span class="token class-name">Decimal</span> → <span class="token punctuation">(</span> <span class="token class-name">Integer</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span> digit <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">9</span> <span class="token punctuation">)</span>
<span class="token class-name">String</span> → <span class="token string">&quot; ( ASCII ) \\* &quot;</span>
<span class="token class-name">Digit</span> → <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token number">9</span>
<span class="token class-name">Letter</span> → a <span class="token operator">|</span> b <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> z <span class="token operator">|</span> <span class="token class-name">A</span> <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token class-name">Z</span> <span class="token operator">|</span> \\_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(2) Important sub-NFA definations</strong> (a)Identifier: <img src="`+i+'" alt="!Alt text(/assets/images/compile/lab1/image-1.png)" loading="lazy"></p><p>(b)Integer: <img src="'+r+'" alt="Alt text" loading="lazy"></p><p>(c)Decimal: <img src="'+u+'" alt="Alt text" loading="lazy"></p><p>(d)String: <img src="'+k+'" alt="Alt text" loading="lazy"></p><p><strong>(3) Merge sub-NFAs</strong><img src="'+d+'" alt="Alt text" loading="lazy"></p><p><strong>(4) Convert NFA to DFA</strong><img src="'+m+`" alt="Alt text" loading="lazy"></p><h3 id="_5、code-description" tabindex="-1"><a class="header-anchor" href="#_5、code-description"><span>5、Code Description</span></a></h3><p><em>Note: This lab&#39;s code is based on Java</em> (1) Data Structures and Algorithms In the program, I use ArrayList to store fixed keywords,delimiters... During the analyzing, I use some boolean variables to verify which reading state analyzer be in. The whole analyzing process is reading character by character, if next character can connect with last character, merge them in to a word string. Until unconnectable situation, the word will be output and its type will be verified by matching. Then clear the word and start read next word or special symbols.</p><p>(2) Running Case</p><p><em><strong>input.txt</strong></em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">-</span>a<span class="token punctuation">;</span>
        <span class="token keyword">float</span> c <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">&gt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                b<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) Running Result</p><p><em><strong>output.txt</strong></em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">public</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">class</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> main <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">public</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> f <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> a <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> b <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">return</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> a <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">+</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> b <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">public</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">static</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">void</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> main <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> args <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> a <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> 10 <span class="token punctuation">,</span> <span class="token class-name">Integer</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> b <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> 5 <span class="token punctuation">,</span> <span class="token class-name">Integer</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> 10 <span class="token punctuation">,</span> <span class="token class-name">Integer</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">-</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> a <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">float</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> c <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> 1<span class="token punctuation">.</span>5 <span class="token punctuation">,</span> <span class="token class-name">Decimal</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">if</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> b <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> 5 <span class="token punctuation">,</span> <span class="token class-name">Integer</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> true <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">System</span> <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> out <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> println <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token string">&quot;B&quot;</span> <span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">else</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token keyword">while</span> <span class="token punctuation">,</span> <span class="token class-name">Keyword</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> b <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">&gt;</span></span><span class="token operator">=</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> 5 <span class="token punctuation">,</span> <span class="token class-name">Integer</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span> b <span class="token punctuation">,</span> <span class="token class-name">Identifier</span> <span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span> <span class="token operator">--</span> <span class="token punctuation">,</span> <span class="token class-name">Operator</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token class-name">Delimiter</span> <span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、problems-and-comments" tabindex="-1"><a class="header-anchor" href="#_6、problems-and-comments"><span>6、Problems and Comments</span></a></h3><p>(1)Problems and Solutions: In this lab, I find it hard to distinguish a character is whether a part of a whole word string. At beginning, I want to easily devide the whole character stream into some word by whitespace, but I realize that there may not be space between different tokens. To deal with, I set some boolean variables and some control sentences to lead the analyzer how to do next. The situation is determined by the character reading now, different types of character will lead to different state and the right reading action.</p><p>(2)Feelings and Comments: In this lab, I realized that a real analyzer is much different to book knowledge. For example, a token may be defined as a long word or even a combined word instead of a single character on the book. So it seems important to find the right tokens and extract them out. Besides, I realized the use of DFA, a DFA helps me to confirm the reading states and the switch condition between different states.</p><h3 id="_7、how-to-use" tabindex="-1"><a class="header-anchor" href="#_7、how-to-use"><span>7、How to Use?</span></a></h3>`,57),b={href:"https://github.com/Xavoric/Lexical-Analyzer",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"(2). Write java code as input in the input.txt.",-1),y=n("p",null,"(3). Check the file address in the code whether it is correct.",-1),f=n("p",null,"(4). Run.",-1),w=n("h3",{id:"tips",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tips"},[n("span",null,"TIPS")])],-1),_=n("p",null,"懒得翻译了，直接扔上来算了)",-1);function I(D,x){const a=e("ExternalLinkIcon");return p(),o("div",null,[v,n("p",null,[s("(1). You can get the source code "),n("a",b,[s("here"),c(a)])]),h,y,f,w,_])}const A=t(g,[["render",I],["__file","compile_lab1.html.vue"]]),R=JSON.parse('{"path":"/posts/study/compile_lab1.html","title":"编译原理-词法分析器","lang":"zh-CN","frontmatter":{"title":"编译原理-词法分析器","date":"2024-03-18T00:00:00.000Z","study":true,"category":["学习"],"tag":["编译原理","Java","English-Only"],"star":false,"sticky":false,"sidebar":false,"breadcrumb":false,"footer":"I will reach the star.","description":"Lexical Analyzer Report 1、Motivation & Content description Build a lexical analyzer program to read stream of characters and show the sequence of tokens. Requirements: (1) Input...","head":[["meta",{"property":"og:url","content":"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/posts/study/compile_lab1.html"}],["meta",{"property":"og:site_name","content":"宙宇空"}],["meta",{"property":"og:title","content":"编译原理-词法分析器"}],["meta",{"property":"og:description","content":"Lexical Analyzer Report 1、Motivation & Content description Build a lexical analyzer program to read stream of characters and show the sequence of tokens. Requirements: (1) Input..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/assets/images/compile/lab1/image-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:08:36.000Z"}],["meta",{"property":"article:author","content":"Unisky"}],["meta",{"property":"article:tag","content":"编译原理"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"English-Only"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:08:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译原理-词法分析器\\",\\"image\\":[\\"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/assets/images/compile/lab1/image-1.png\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:08:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Unisky\\"}]}"]]},"headers":[{"level":2,"title":"Lexical Analyzer Report","slug":"lexical-analyzer-report","link":"#lexical-analyzer-report","children":[{"level":3,"title":"1、Motivation & Content description","slug":"_1、motivation-content-description","link":"#_1、motivation-content-description","children":[]},{"level":3,"title":"2、Method","slug":"_2、method","link":"#_2、method","children":[]},{"level":3,"title":"3、Assumptions","slug":"_3、assumptions","link":"#_3、assumptions","children":[]},{"level":3,"title":"4、RE and FA descriptions","slug":"_4、re-and-fa-descriptions","link":"#_4、re-and-fa-descriptions","children":[]},{"level":3,"title":"5、Code Description","slug":"_5、code-description","link":"#_5、code-description","children":[]},{"level":3,"title":"6、Problems and Comments","slug":"_6、problems-and-comments","link":"#_6、problems-and-comments","children":[]},{"level":3,"title":"7、How to Use?","slug":"_7、how-to-use","link":"#_7、how-to-use","children":[]},{"level":3,"title":"TIPS","slug":"tips","link":"#tips","children":[]}]}],"git":{"createdTime":1725610116000,"updatedTime":1725610116000,"contributors":[{"name":"Xavoric","email":"3024008334@qq.com","commits":1}]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"posts/study/compile_lab1.md","localizedDate":"2024年3月18日","excerpt":"<h2>Lexical Analyzer Report</h2>\\n<h3>1、Motivation &amp; Content description</h3>\\n<p>Build a lexical analyzer program to read stream of characters and show the sequence of tokens.</p>\\n<p><strong>Requirements:</strong></p>\\n<p>(1) Input:</p>\\n<p>  Stream of characters</p>\\n<p>  REs(The number of REs is decided by yourself)</p>","autoDesc":true}');export{A as comp,R as data};
