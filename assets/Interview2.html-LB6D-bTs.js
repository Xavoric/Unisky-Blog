import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,e as n,a as s,b as a}from"./app-DrMrOvds.js";const p={},i=n('<h1 id="技术岗面试题小结-二" tabindex="-1"><a class="header-anchor" href="#技术岗面试题小结-二"><span>技术岗面试题小结（二）</span></a></h1><p>研发岗的面试问题可能不会局限于某个编程语言或者某个技术栈，有时候也会去问一些比较杂项的东西，所以这里单开一个系列来汇总这些杂项题目。可能会包括一些智力题和应用题</p><h2 id="_1-cas算法的缺点" tabindex="-1"><a class="header-anchor" href="#_1-cas算法的缺点"><span>1.CAS算法的缺点</span></a></h2><p><strong>ABA问题</strong>，数据经过多次修改回到了初始值，此时使用CAS算法无法判断是否被修改 解决方案是引入版本号数据，案例有Java的AtomicStampedReference类</p><p><strong>高竞争开销</strong>，反复重试的情况下CPU开销大，解决方案是引入退出机制，设置重试次数上限，或避免使用乐观锁</p><p><strong>功能受限</strong>，CAS只能保证单值的操作原子性</p><h2 id="_2-包装类integer-如果值都是100-用-判断-它们是否是相等的" tabindex="-1"><a class="header-anchor" href="#_2-包装类integer-如果值都是100-用-判断-它们是否是相等的"><span>2.包装类Integer，如果值都是100，用==判断，它们是否是相等的？</span></a></h2><p>相等，虽然Integer对象比较的是地址，但值位于-128到127之间时会直接使用常量池中对应的缓存对象，因此两个值为100的Integer对象实则引用的是同一个缓存对象</p><h2 id="_3-cpu核心数量与线程池数量的关系" tabindex="-1"><a class="header-anchor" href="#_3-cpu核心数量与线程池数量的关系"><span>3.CPU核心数量与线程池数量的关系</span></a></h2><p>CPU密集型应用（算法等）：线程池大小设置为<strong>N+1</strong>左右</p><p>IO密集型应用（IO,网络等）：线程池大小设置为<strong>2N+1</strong>左右</p><h2 id="_4-一根绳子随机切3段-能够构成三角形的概率是多大" tabindex="-1"><a class="header-anchor" href="#_4-一根绳子随机切3段-能够构成三角形的概率是多大"><span>4.一根绳子随机切3段，能够构成三角形的概率是多大</span></a></h2><p>概率为1/4，需要列举不等式组来通过图像解答，如下： 记三段绳子长为x,y,1-x-y,约束条件为：</p>',13),c=s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",null,"<"),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",null,"<"),s("mn",null,"0.5")]),s("annotation",{encoding:"application/x-tex"},"0<x,y<0.5")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6835em","vertical-align":"-0.0391em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0.5")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"+"),s("mi",null,"y"),s("mo",null,">"),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"x"),s("mo",null,"−"),s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"x+y>1-x-y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"+"),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"x"),s("mo",null,"−"),s("mi",null,"y"),s("mo",null,">"),s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"x+1-x-y>y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"y"),s("mo",null,"+"),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"x"),s("mo",null,"−"),s("mi",null,"y"),s("mo",null,">"),s("mi",null,"x")]),s("annotation",{encoding:"application/x-tex"},"y+1-x-y>x")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x")])])])])],-1),o=s("p",null,"画出图像可以发现取值范围占定义域的四分之一",-1),r=s("h2",{id:"_5-kmp算法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-kmp算法"},[s("span",null,"5.KMP算法")])],-1),m=s("p",null,[a("KMP是高效的字符串匹配算法，避免了传统字符串匹配的繁杂回溯操作 记原字符串为str，其索引为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a("，需匹配字符串为模式字符串pat，其索引为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])])],-1),u=s("p",null,"要求即为寻找txt中是否包含pat",-1),h=s("p",null,[a("同时提出一个"),s("strong",null,"最大匹配长度"),a("的概念，这个指的是子串前缀与后缀相同部分的最大长度")],-1),d=s("p",null,[a("使用"),s("code",null,"next[]"),a("数组来储存模式字符串每一个子串（均从头开始）的最大匹配长度，"),s("code",null,"next[i]"),a("意味着匹配失败时"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("需要回退到的位置，而"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a("无需回溯。next的算法如下：")],-1),k=n(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pat<span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g=s("p",null,[a("然后是正式匹配操作，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a("和"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("均从"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a("开始进行匹配。 若匹配成功，即"),s("code",null,"str[i]==pat[j]"),a("，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a("和"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("均+1 若匹配失败，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a("保持不变，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("回退到"),s("code",null,"next[j-1]"),a("的位置，继续匹配"),s("code",null,"str[i]和pat[next[j-1]]")],-1),y=n(`<p>算法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>charAt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pat<span class="token punctuation">.</span>charAt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    j<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-sql语句优化" tabindex="-1"><a class="header-anchor" href="#_6-sql语句优化"><span>6.SQL语句优化</span></a></h2><ul><li>不使用 * 而使用具体字段，节省资源</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">//优化前</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
<span class="token comment">//优化后</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对排重要求不高的情况合并查询结果用union all 代替union</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">//优化前</span>
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//优化后</span>
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小表驱动大表，in左大右小，exists左小右大</li><li>批量操作，避免多次请求数据库</li><li>使用limit限制查询数据数量</li><li>分表分库，分页查询</li><li>联表查询时减少join使用数量</li></ul><h2 id="_7-mysql和redis数据一致性的解决方案" tabindex="-1"><a class="header-anchor" href="#_7-mysql和redis数据一致性的解决方案"><span>7.MySQL和Redis数据一致性的解决方案</span></a></h2><p>MySQL作为数据库，Redis作为缓存</p><ul><li><strong>双写</strong>，业务代码中同时对两个数据库进行更新（先MySQL后Redis），但程序网络有问题的情况下无法保证双写一致性</li><li><strong>消息队列</strong>，向双写业务代码中引入消息队列，监听数据库变更事件，异步更新数据库</li><li><strong>实时同步</strong>，MySQL数据发生变化时，通过触发器、消息队列等方式通知Redis更新</li></ul><h2 id="_8-mysql的行锁" tabindex="-1"><a class="header-anchor" href="#_8-mysql的行锁"><span>8.MySQL的行锁</span></a></h2><p>MySQL自动根据需要锁定事务需要修改的数据行</p><ul><li><strong>记录锁</strong>：锁定被操作的数据行，保护记录不被其他事务修改，其中排他锁（X锁）不能读写，共享锁（S锁）不能修改</li><li><strong>间隙锁</strong>：锁定范围而不包括范围内数据，阻止其他事务在该范围内插入数据，防止<strong>幻读</strong>（两次相同查询在事务执行时，第二次查询返回了新插入行）</li><li><strong>临键锁</strong>：锁定范围内的记录</li></ul><h2 id="_9-redis宕机怎么办" tabindex="-1"><a class="header-anchor" href="#_9-redis宕机怎么办"><span>9.Redis宕机怎么办</span></a></h2><p>及时重启Redis服务（Redis守护进程），检查日志文件和配置文件，保持对Redis性能的监控。 根据宕机原因对服务配置进行修改和优化，例如优化内存使用率，提高最大连接数。</p><h2 id="_10-mybatis的-和-有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-mybatis的-和-有什么区别"><span>10.MyBatis的#和$有什么区别</span></a></h2><p>\${}是字符串替换，会将参数值拼接到SQL中，存在SQL注入的风险，#{}可以防止SQL注入</p><h2 id="_11-hashmap与泊松分布" tabindex="-1"><a class="header-anchor" href="#_11-hashmap与泊松分布"><span>11.HashMap与泊松分布</span></a></h2><p>HashMap底层从链表变为红黑树的阈值为8，由加载因子loadFactory=0.75和泊松分布决定（红黑树退化为链表的阈值为6）</p><p>随机hashCode的算法下，通过泊松分布式计算长度为8时发生哈希碰撞的概率约为亿分之六，大于8的情况下可以视为几乎不发生碰撞</p><h2 id="_12-redis的缓存击穿、缓存穿透、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_12-redis的缓存击穿、缓存穿透、缓存雪崩"><span>12.Redis的缓存击穿、缓存穿透、缓存雪崩</span></a></h2><p><strong>（1）缓存击穿</strong>： 用户查询数据在缓存中不存在，在数据库中存在，需要访问数据库。主要针对某一热点key失效，导致大量访问需要访问数据库，导致数据库负载瞬间增加</p><p>解决方案：热点key永不过期或定时更新过期时间，互斥锁（首次访问数据库加锁）</p><p><strong>（2）缓存穿透</strong>： 查询数据时，缓存未命中，访问数据库时也未查询到数据造成查询失败，最终返回空对象。大量该类型查询会令MySQL增压、甚至崩溃。</p><p>导致原因：可能是数据被删除或恶意攻击。</p><p>解决方案：缓存空对象，业务逻辑筛查，黑名单，布隆过滤器</p><p><strong>（3）缓存雪崩</strong>： 大规模key过期导致的缓存击穿或Redis宕机，导致海量请求进入数据库</p><p>解决方案：设置有效期均匀分布，大量请求前数据预热，增强Redis服务可用性</p><h2 id="_13-布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_13-布隆过滤器"><span>13.布隆过滤器</span></a></h2><p>一种概率型数据结构，用于判断一个元素是否属于某个集合，基本结构是一个位数组</p><p>通过哈希算法，在插入数据时将对应索引位置的位设置为1。在查询时，通过哈希查询对应位上的值，若为1，则<strong>可能</strong>存在该集合中，若为0，则<strong>不可能</strong>存在于该集合中</p><p>因为哈希碰撞，可能导致不同插入映射到了同一位上，出现 <strong>假阳(误报)</strong> 情况，但不会出现 <strong>假阴(漏报)</strong> 的情况</p>`,33),x=[i,c,o,r,m,u,h,d,k,g,y];function v(b,w){return e(),l("div",null,x)}const f=t(p,[["render",v],["__file","Interview2.html.vue"]]),S=JSON.parse('{"path":"/posts/study/Interview2.html","title":"技术岗面试题小结（二）","lang":"zh-CN","frontmatter":{"date":"2024-08-28T00:00:00.000Z","category":["学习"],"tag":["面试"],"star":false,"sticky":false,"sidebar":false,"breadcrumb":false,"footer":39,"description":"技术岗面试题小结（二） 研发岗的面试问题可能不会局限于某个编程语言或者某个技术栈，有时候也会去问一些比较杂项的东西，所以这里单开一个系列来汇总这些杂项题目。可能会包括一些智力题和应用题 1.CAS算法的缺点 ABA问题，数据经过多次修改回到了初始值，此时使用CAS算法无法判断是否被修改 解决方案是引入版本号数据，案例有Java的AtomicStampe...","head":[["meta",{"property":"og:url","content":"https://xavoric.github.io/Unisky-Blog/Unisky-Blog/posts/study/Interview2.html"}],["meta",{"property":"og:site_name","content":"宙宇空"}],["meta",{"property":"og:title","content":"技术岗面试题小结（二）"}],["meta",{"property":"og:description","content":"技术岗面试题小结（二） 研发岗的面试问题可能不会局限于某个编程语言或者某个技术栈，有时候也会去问一些比较杂项的东西，所以这里单开一个系列来汇总这些杂项题目。可能会包括一些智力题和应用题 1.CAS算法的缺点 ABA问题，数据经过多次修改回到了初始值，此时使用CAS算法无法判断是否被修改 解决方案是引入版本号数据，案例有Java的AtomicStampe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:10:46.000Z"}],["meta",{"property":"article:author","content":"Unisky"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2024-08-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:10:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"技术岗面试题小结（二）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:10:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Unisky\\"}]}"]]},"headers":[{"level":2,"title":"1.CAS算法的缺点","slug":"_1-cas算法的缺点","link":"#_1-cas算法的缺点","children":[]},{"level":2,"title":"2.包装类Integer，如果值都是100，用==判断，它们是否是相等的？","slug":"_2-包装类integer-如果值都是100-用-判断-它们是否是相等的","link":"#_2-包装类integer-如果值都是100-用-判断-它们是否是相等的","children":[]},{"level":2,"title":"3.CPU核心数量与线程池数量的关系","slug":"_3-cpu核心数量与线程池数量的关系","link":"#_3-cpu核心数量与线程池数量的关系","children":[]},{"level":2,"title":"4.一根绳子随机切3段，能够构成三角形的概率是多大","slug":"_4-一根绳子随机切3段-能够构成三角形的概率是多大","link":"#_4-一根绳子随机切3段-能够构成三角形的概率是多大","children":[]},{"level":2,"title":"5.KMP算法","slug":"_5-kmp算法","link":"#_5-kmp算法","children":[]},{"level":2,"title":"6.SQL语句优化","slug":"_6-sql语句优化","link":"#_6-sql语句优化","children":[]},{"level":2,"title":"7.MySQL和Redis数据一致性的解决方案","slug":"_7-mysql和redis数据一致性的解决方案","link":"#_7-mysql和redis数据一致性的解决方案","children":[]},{"level":2,"title":"8.MySQL的行锁","slug":"_8-mysql的行锁","link":"#_8-mysql的行锁","children":[]},{"level":2,"title":"9.Redis宕机怎么办","slug":"_9-redis宕机怎么办","link":"#_9-redis宕机怎么办","children":[]},{"level":2,"title":"10.MyBatis的#和$有什么区别","slug":"_10-mybatis的-和-有什么区别","link":"#_10-mybatis的-和-有什么区别","children":[]},{"level":2,"title":"11.HashMap与泊松分布","slug":"_11-hashmap与泊松分布","link":"#_11-hashmap与泊松分布","children":[]},{"level":2,"title":"12.Redis的缓存击穿、缓存穿透、缓存雪崩","slug":"_12-redis的缓存击穿、缓存穿透、缓存雪崩","link":"#_12-redis的缓存击穿、缓存穿透、缓存雪崩","children":[]},{"level":2,"title":"13.布隆过滤器","slug":"_13-布隆过滤器","link":"#_13-布隆过滤器","children":[]}],"git":{"createdTime":1725610116000,"updatedTime":1725610246000,"contributors":[{"name":"Xavoric","email":"3024008334@qq.com","commits":2}]},"readingTime":{"minutes":6.09,"words":1828},"filePathRelative":"posts/study/Interview2.md","localizedDate":"2024年8月28日","excerpt":"\\n<p>研发岗的面试问题可能不会局限于某个编程语言或者某个技术栈，有时候也会去问一些比较杂项的东西，所以这里单开一个系列来汇总这些杂项题目。可能会包括一些智力题和应用题</p>\\n<h2>1.CAS算法的缺点</h2>\\n<p><strong>ABA问题</strong>，数据经过多次修改回到了初始值，此时使用CAS算法无法判断是否被修改\\n解决方案是引入版本号数据，案例有Java的AtomicStampedReference类</p>\\n<p><strong>高竞争开销</strong>，反复重试的情况下CPU开销大，解决方案是引入退出机制，设置重试次数上限，或避免使用乐观锁</p>\\n<p><strong>功能受限</strong>，CAS只能保证单值的操作原子性</p>","autoDesc":true}');export{f as comp,S as data};
